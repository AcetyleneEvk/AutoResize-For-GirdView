        If gv_ExcetionDetail.Rows.Count > 0 Then
                Dim BmpColumn As DataGridViewDisableButtonColumn = New DataGridViewDisableButtonColumn()
                Dim BtnExport As DataGridViewDisableButtonColumn = New DataGridViewDisableButtonColumn()
                Dim BtnDelete As DataGridViewDisableButtonColumn = New DataGridViewDisableButtonColumn()
                BmpColumn.Name = "Edit"
                BtnExport.Name = "Export"
                BtnDelete.Name = "Delete"

                BmpColumn.DefaultCellStyle.NullValue = Nothing
                BtnExport.DefaultCellStyle.NullValue = Nothing
                BtnDelete.DefaultCellStyle.NullValue = Nothing

                BmpColumn.HeaderText = "異動"
                BtnExport.HeaderText = "拋轉"
                BtnDelete.HeaderText = "刪除"

                gv_ExcetionDetail.Columns.Insert(0, BtnExport)
                gv_ExcetionDetail.Columns.Insert(1, BtnDelete)
                gv_ExcetionDetail.Columns.Insert(15, BmpColumn)


                For Each row As DataGridViewRow In gv_ExcetionDetail.Rows
                    row.Cells("Edit").Value = "異動"
                    row.Cells("Export").Value = "拋轉"
                    row.Cells("Delete").Value = "刪除"
                    Application.DoEvents()
                Next
                Me.gv_ExcetionDetail.DefaultCellStyle.Font = New Font("Tahoma", 13)
                Me.gv_ExcetionDetail.RowHeadersDefaultCellStyle.Font = New Font("Tahoma", 13)
                If gv_ExcetionDetail.Rows.Count > 0 Then
                    gvPreOrderChangeStyle()
                    gvExcetionDeleteVisible()
                End If
                gv_ExcetionDetail.Refresh()
            End If


'==========================

Public Class DataGridViewDisableButtonColumn
    Inherits DataGridViewButtonColumn

    Public Sub New()
        Me.CellTemplate = New DataGridViewDisableButtonCell()
    End Sub
End Class

Public Class DataGridViewDisableButtonCell
    Inherits DataGridViewButtonCell

    Private enabledValue As Boolean
    Public Property Enabled() As Boolean
        Get
            Return enabledValue
        End Get
        Set(ByVal value As Boolean)
            enabledValue = value
        End Set
    End Property

    ' Override the Clone method so that the Enabled property is copied.
    Public Overrides Function Clone() As Object
        Dim Cell As DataGridViewDisableButtonCell = _
            CType(MyBase.Clone(), DataGridViewDisableButtonCell)
        Cell.Enabled = Me.Enabled
        Return Cell
    End Function

    ' By default, enable the button cell.
    Public Sub New()
        Me.enabledValue = True
    End Sub

    Protected Overrides Sub Paint(ByVal graphics As Graphics, _
        ByVal clipBounds As Rectangle, ByVal cellBounds As Rectangle, _
        ByVal rowIndex As Integer, _
        ByVal elementState As DataGridViewElementStates, _
        ByVal value As Object, ByVal formattedValue As Object, _
        ByVal errorText As String, _
        ByVal cellStyle As DataGridViewCellStyle, _
        ByVal advancedBorderStyle As DataGridViewAdvancedBorderStyle, _
        ByVal paintParts As DataGridViewPaintParts)

        ' The button cell is disabled, so paint the border,  
        ' background, and disabled button for the cell.
        If Not Me.enabledValue Then

            ' Draw the background of the cell, if specified.
            If (paintParts And DataGridViewPaintParts.Background) = _
                DataGridViewPaintParts.Background Then

                Dim cellBackground As New SolidBrush(cellStyle.BackColor)
                graphics.FillRectangle(cellBackground, cellBounds)
                cellBackground.Dispose()
            End If

            ' Draw the cell borders, if specified.
            If (paintParts And DataGridViewPaintParts.Border) = _
                DataGridViewPaintParts.Border Then

                PaintBorder(graphics, clipBounds, cellBounds, cellStyle, _
                    advancedBorderStyle)
            End If

            ' Calculate the area in which to draw the button.
            Dim buttonArea As Rectangle = cellBounds
            Dim buttonAdjustment As Rectangle = _
                Me.BorderWidths(advancedBorderStyle)
            buttonArea.X += buttonAdjustment.X
            buttonArea.Y += buttonAdjustment.Y
            buttonArea.Height -= buttonAdjustment.Height
            buttonArea.Width -= buttonAdjustment.Width

            ' Draw the disabled button.                
            ButtonRenderer.DrawButton(graphics, buttonArea, _
                PushButtonState.Disabled)

            ' Draw the disabled button text. 
            If TypeOf Me.FormattedValue Is String Then
                TextRenderer.DrawText(graphics, CStr(Me.FormattedValue), _
                    Me.DataGridView.Font, buttonArea, SystemColors.GrayText)
            End If

        Else
            ' The button cell is enabled, so let the base class 
            ' handle the painting.
            MyBase.Paint(graphics, clipBounds, cellBounds, rowIndex, _
                elementState, value, formattedValue, errorText, _
                cellStyle, advancedBorderStyle, paintParts)
        End If
    End Sub

End Class
